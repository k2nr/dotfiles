alias git="noglob hub"
alias rake="noglob rake"

## antigen
source ~/antigen/antigen.zsh

# Bundles from the default repo
antigen-bundle dircycle
antigen-bundle git
antigen-bundle osx

chpwd() {
    ls_abbrev
}
ls_abbrev() {
    # -a : Do not ignore entries starting with ..
    # -C : Force multi-column output.
    # -F : Append indicator (one of */=>@|) to entries.
    local cmd_ls='ls'
    local -a opt_ls
    opt_ls=('-aCF' '--color=always')
    case "${OSTYPE}" in
        freebsd*|darwin*)
            if type gls > /dev/null 2>&1; then
                cmd_ls='gls'
            else
                # -G : Enable colorized output.
                opt_ls=('-aCFG')
            fi
            ;;
    esac
 
    local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')
 
    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')
 
    if [ $ls_lines -gt 10 ]; then
        echo "$ls_result" | head -n 5
        echo '...'
        echo "$ls_result" | tail -n 5
        echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
    else
        echo "$ls_result"
    fi
}

### aliases
alias lla="ls -la"
alias emacs="emacsclient -n"
alias e="emacs"
alias o="open"
alias rmr="rm -rf"
alias vim="mvim -v"
alias vi="vim"
alias v="vim"
alias tmux="TERM=screen-256color-bce tmux"
alias viconf="vi ~/.vimrc"
alias zshconf="vi ~/.zshrc.mine"
alias less="less -N -M"
alias ack="ack --nogroup"
alias a="ack"
alias src="source ~/.zshrc"
alias bu="brew update && brew upgrade"
alias vag="vagrant"
alias ff="ffind"

# extend antigen git plugin
alias g="git"
alias gs="git status"
alias gd="git diff"
alias gf="git fetch"
alias gm="git merge"
alias gr="git rebase"
alias gp="git push -u"
alias gpl="git pull"
alias gdc="git diff --cached"
alias gdvc="gdv --cached"
alias gl="git log --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %Cblue<%an>%Creset'"
alias gst="git stash save"
alias gstl="git stash list"
alias gstc="git stash clear"
alias gstp="git stash pop"
alias gready="git rebase -i @{u}"
alias gn="git now"
alias gnc="git now --compact"
alias gnd="git now --diff"
alias gnr="git now --rebase"
alias gnf="git now --fixup"

## hub aliases

# merge pull-request with pull-request number
# USAGE: gmpr 1
gmpr() {
  git merge `git config --get remote.origin.url | sed -e 's/\.git//'`/pull/$1
}

alias gpr="git pull-request"
alias gbr="git browse"

alias be="bundle exec"
alias t="tig"
alias ts="tig status"

# global aliases
alias -g L="|less"
alias -g G="|grep"
alias -g XG="|xargs grep -Hn"
alias -g XG0="|xargs -0 grep -Hn"
alias -g C="|pbcopy"
alias -g P="pbpaste|"
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'

export EDITOR="vi"

# to use japanese on swank
export JAVA_OPTS="-Dswank.encoding=utf-8-unix"

path=(. $HOME/bin /usr/local/share/npm/bin /usr/local/sbin /usr/local/bin /sbin /bin /usr/sbin /usr/bin $HOME/bin/depot_tools )

autoload -U select-word-style
select-word-style bash

# ignore case for completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# zsh-completions
fpath=(/usr/local/share/zsh-completions $fpath)

# prompt
autoload -Uz vcs_info
zstyle ':vcs_info:*' formats \
    '%{%F{yellow}%}(%b)%{%f%}'

pro_cur_dir="%{%F{yellow}%}[%~]"
pro_user="%{%F{cyan}%}%n@%m"
pro_time="%{%F{cyan}%}<%D{%Y/%m/%d %H:%M:%S}>"
update_prompt() {
    # バージョン管理システムの情報を取得する。
    LANG=C vcs_info >&/dev/null
    # バージョン管理システムの情報があったらプロンプトに表示する。
    if [ -n "$vcs_info_msg_0_" ]; then
        pro_vcs="${vcs_info_msg_0_}"
    else
        pro_vcs=""
    fi

    PROMPT="${pro_cur_dir}${pro_user} ${pro_time} ${pro_vcs}"$'\n'"%{%f%}%# "
}
#RPROMPT="${pro_vcs}"

precmd_functions=($precmd_functions update_prompt)

# android
export NDK="/usr/local/Cellar/android-ndk/r6b/"

# rbenv
#export PATH="$HOME/.rbenv/bin:$PATH"
#eval "$(rbenv init -)"

# rvm
source $HOME/.rvm/scripts/rvm
cd;cd - > /dev/null

## z
. `brew --prefix`/etc/profile.d/z.sh

## tmuxinator
[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator
