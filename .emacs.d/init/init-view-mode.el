(require 'shared-funs)
(require 'thingatpt)

(setq view-read-only t)
(defvar pager-keybind
  `( ;; vi-like
    ("h" . backward-char)
    ("l" . forward-char)
    ("j" . next-line)
    ("k" . previous-line)
    ("\C-b" . scroll-down)
    ("\C-f" . scroll-up)
    ("w" . forward-word)
    ("b" . backward-word)
    ("i" . toggle-read-only)
    ("/" . isearch-forward)
    ("n" . isearch-repeat-forward)
    ("N" . isearch-repeat-backward)
    ("x" . delete-char)
    ("gg" . beginning-of-buffer)
    ("G" . end-of-buffer)
    ("dw" . kill-word)
    ("u" . undo-tree-undo)
    ("C-r" . undo-tree-redo)
    ))

(defun define-many-keys (keymap key-table &optional includes)
  (let (key cmd)
    (dolist (key-cmd key-table)
      (setq key (car key-cmd)
            cmd (cdr key-cmd))
      (if (or (not includes) (member key includes))
          (define-key keymap key cmd))))
  keymap)

(defun view-mode-hook0 ()
  (define-many-keys view-mode-map pager-keybind)
  (hl-line-mode 1)
  (define-key view-mode-map " " 'scroll-up))
(add-hook 'view-mode-hook 'view-mode-hook0)

(defadvice find-file
  (around find-file-switch-to-view-file (file &optional wild) activate)
  (if (and (not (file-writable-p file))
           (not (file-directory-p file)))
      (view-file file)
    ad-do-it))

(defvar view-mode-force-exit nil)
(defmacro do-not-exit-view-mode-unless-writable-advice (f)
  `(defadvice ,f (around do-not-exit-view-mode-unless-writable activate)
     (if (and (buffer-file-name)
              (not view-mode-force-exit)
              (not (file-writable-p (buffer-file-name))))
         (message "File is unwritable, so stay in view-mode.")
       ad-do-it)))

(do-not-exit-view-mode-unless-writable-advice view-mode-exit)
(do-not-exit-view-mode-unless-writable-advice view-mode-disable)

(provide 'init-view-mode)
